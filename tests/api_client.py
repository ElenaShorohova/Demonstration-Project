import logging
import requests
from requests.exceptions import RequestException, Timeout
from pydantic import BaseModel
from typing import Type, Optional


class APIClient:
    """–ë–∞–∑–æ–≤—ã–π API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Rick and Morty API"""

    BASE_URL = "https://rickandmortyapi.com/api"

    def __init__(self):
        self.session = requests.Session()

    def request(
        self,
        method: str,
        endpoint: str,
        params: Optional[dict] = None,
        response_model: Optional[Type[BaseModel]] = None,
        timeout: int = 5,
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API, –ª–æ–≥–∏—Ä—É–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç"""
        url = f"{self.BASE_URL}/{endpoint}"
        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {method} –∑–∞–ø—Ä–æ—Å –Ω–∞ {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")

        try:
            response = self.session.request(method, url, params=params, timeout=timeout)
            response.raise_for_status()  # –ë—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ 4xx/5xx

        except Timeout:
            logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ {method} {url}")
            return {"error": "Request timed out"}

        except requests.HTTPError:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return {"error": f"HTTP error {response.status_code}"}

        except RequestException as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
            return {"error": "Network error"}

        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç ({response.status_code}): {response.text[:500]}")

        if response_model:
            return response_model.model_validate(
                response.json()
            )  # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic

        return response.json()


class RickAndMortyAPI(APIClient):
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Rick and Morty API"""

    def get_character(self, character_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID"""
        return self.request("GET", f"character/{character_id}")

    def get_all_characters(self, page: int = 1):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        return self.request("GET", "character", params={"page": page})

    def get_episode(self, episode_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–ø–∏–∑–æ–¥ –ø–æ ID"""
        return self.request("GET", f"episode/{episode_id}")
